public class Solution
{
		private Node top;
		private int size;
		
	  public class Node
	  {
	    	private int data;
	    	private Node next;
	    	
	    	public Node(int data)
	    	{
	    		this.data=data;
	    		this.next=null;
	    	}
	  }
	    
	  public void push(int data)
	  {   
	    	Node newnode=new Node(data);
	    	newnode.next=top;
	    	top=newnode;
	    	size++;
	  }
	    
	  public int pop()
	  {
	    	int result=top.data;
	    	top=top.next;
	    	size--;
	    	return result;
	  }
	    
	  public int size()
	  {
	    	return size;
	  }
	    
	  public boolean isEmpty()
	  {
	    	if(size==0)
	    	{
	    		return true;
	    	}
	    	return false;
	  }
	    
	  public int peek()
	  {
	    	return top.data;
	  }
    
	  public static boolean checkRedundantBrackets(String expression) 
    {
		String str=expression;
		Solution node=new Solution();
		boolean answer = false;
		for(int i=0;i<str.length();i++)
		{   
			char ch=str.charAt(i);
			if (ch == '+' || ch== '-' ||ch == '*' || ch == '/')
			{
			    node.push(ch);
			}
			else if(ch == '(')
		  {
		      node.push(ch);
		  }
		  else if(ch == ')')
		  {
		    if(node.peek() == '(')
		    {
		      answer = true;
		    }
		    while (node.peek() == '+' || node.peek() == '-' ||node.peek() == '*' || node.peek() == '/')
		    {
		       node.pop();
		    }    
		       node.pop();
		    }     
		    }
		    return answer;
	  }
}
