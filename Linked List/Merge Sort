/**************************************************************

    class LinkedListNode<T> 
    {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) 
        {
            this.data = data;
        }
    }

****************************************************************/

public class Solution 
{
	public static LinkedListNode<Integer> mergeSort(LinkedListNode<Integer> head) 
  {
    if(head==null||head.next==null)
		{
			return head;
		}
    
		LinkedListNode<Integer> mid=midNode(head);
		LinkedListNode<Integer> newHead=mid.next;
		mid.next=null;
		LinkedListNode<Integer> link1=mergeSort(head);
		LinkedListNode<Integer> link2=mergeSort(newHead);
		return mergeTwoSortedLinkedLists(link1,link2);
	}
	
	public static LinkedListNode<Integer> midNode(LinkedListNode<Integer> head)
	{
		if(head==null||head.next==null)
		{
			return head;
		}
    
		LinkedListNode<Integer> fast=head;
		LinkedListNode<Integer> slow=head;
    
		while(fast.next!=null&&fast.next.next!=null)
		{
			    slow=slow.next;
			    fast=fast.next.next;
		}
	
		LinkedListNode<Integer> mid=slow;
		return mid;	
	}
	
	public static LinkedListNode<Integer> mergeTwoSortedLinkedLists(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2)
	{
		LinkedListNode<Integer> temp1=head1,temp2=head2,tail=null,head=null;
    
		if(head1==null)
		{
			return head2;
		}
    
		if(head2==null)
		{
			return head1;
		}
    
		if(temp1.data<=temp2.data)
		{
			head=temp1;
			tail=temp1;
			temp1=temp1.next;		
		}
		else
		{
			head=temp2;
			tail=temp2;
			temp2=temp2.next;
			
		}
    
		while(temp1!=null&&temp2!=null)
		{
			if(temp1.data<=temp2.data)
			{
				
				tail.next=temp1;
				tail=temp1;	
				temp1=temp1.next;
			}
			else 
			{
				tail.next=temp2;
				tail=tail.next;
				temp2=temp2.next;
			}
		 }
     
			if(temp1==null)
			{
				tail.next=temp2;
		  }
      
			if(temp2==null)
			{
				tail.next=temp1;			
			}		
		return head;
}
}
