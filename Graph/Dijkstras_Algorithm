import java.util.Scanner;

public class Solution 
{
   private static void dijkstra(int[][] adjacencyMatrix) 
	 {
   int n=adjacencyMatrix.length; 
	 boolean visited[]=new boolean[n];
	 int distance[]=new int[n];
	 distance[0]=0;
	 for(int i=1;i<n;i++)
	 {
	 distance[i]=Integer.MAX_VALUE;
	 }
	
	 for(int i=0;i<n-1;i++)
	 {
		int minvertex=findMinvertex(distance,visited);
		visited[minvertex]=true;
		
		for(int j=0;j<n;j++)
		{
			if(adjacencyMatrix[minvertex][j]!=0  && !visited[j]  && distance[minvertex]!=Integer.MAX_VALUE)
			{
				int newdistance=distance[minvertex]+adjacencyMatrix[minvertex][j];
				
				if(newdistance<distance[j])
				{
					distance[j]=newdistance;
				}
		 }
	 }
	}

	
	for(int i=0;i<n;i++)
	{
	System.out.println(i+" "+distance[i]);	
	}
	}
	private static int findMinvertex(int[] distance, boolean[] visited) 
	{
		int minvertex=-1;
		for(int i=0;i<distance.length;i++)
		{
		if(!visited[i] && (minvertex==-1||distance[i]<distance[minvertex]))
		{
			minvertex=i;
		}
		}
		return minvertex;
	}
	  public static void main(String[] args) 
    {
		Scanner s = new Scanner(System.in);
		int V = s.nextInt();
		int E = s.nextInt();

		 int adjacencyMatrix[][]=new int[V][V];
      for(int i=0;i<E;i++)
      {
    	int v1=s.nextInt();
    	int v2=s.nextInt();
    	int weight=s.nextInt();
    	
    	adjacencyMatrix[v1][v2]=weight;
    	adjacencyMatrix[v2][v1]=weight;
    }
    dijkstra(adjacencyMatrix);
	}
}
