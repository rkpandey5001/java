import java.util.ArrayList;

class TrieNode 
{
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data)
  {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie 
{
	private TrieNode root;
	public int count;

	public Trie() 
  {
	root = new TrieNode('\0');
	}

	private void add(TrieNode root, String word)
  {
		if(word.length() == 0)
    {
		root.isTerminating = true;
		return;
		}		

		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];

		if(child == null) 
    {	
     child = new TrieNode(word.charAt(0));
     root.children[childIndex] = child;
	   root.childCount++;
		}

		add(child, word.substring(1));
	}

	public void add(String word)
  {
		add(root, word);
	}

	private boolean search(TrieNode root, String word)
  {
		if(word.length() == 0) 
    {
			return true;
		}

		int childIndex=word.charAt(0) - 'a';
		TrieNode child=root.children[childIndex];

		if(child == null) 
    {
			return false;
		}

		return search(child,word.substring(1));

	}

	public boolean search(String word) 
  {
		return search(root,word);
	}

	private void print(TrieNode root, String word) 
  {
		if (root == null) 
    {
			return;
		}
		
		if (root.isTerminating) 
    {
			System.out.println(word);
		}
		
		for (TrieNode child : root.children) 
    {
			if (child == null)
      {
				continue;
			}
			String fwd = word + child.data;
			print(child, fwd);
		}
	}
	
	public void print() 
  {
		print(this.root, "");
	}





	/*..................... Palindrome Pair................... */
    
    
    public boolean isPalindrome(String s)
    {
        String s1="";
        for(int i=s.length()-1;i>=0;i--)
        {
            s1+=s.charAt(i);
        }
        
        if(s1.equals(s) || search(s1))
            return true;
        return false;
    }


	public boolean isPalindromePair(ArrayList<String> words) 
  {     
        for(String i: words)
        {
            String s=i;
            for(int j=0;j<i.length();j++)
            {
                add(s);
                s=s.substring(1);
            }
        }
        
        for(String i: words)
        {
            if(isPalindrome(i))
            {
            return true;
            }
        }  
        return false;
	}
}
