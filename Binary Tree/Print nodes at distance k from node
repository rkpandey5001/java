/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T>
  {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) 
    {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/


import java.util.*;
public class Solution 
{
	public static void nodesAtDistanceK(BinaryTreeNode<Integer> root, int node, int k)
  {
	path=new ArrayList<>();
	roottonode(root,node);
	for(int i=0;i<path.size();i++)
	{
		printKleveldown(path.get(i),k-i,i==0?null:path.get(i-1));
	}
	}
	static ArrayList<BinaryTreeNode<Integer>> path;
	public static boolean roottonode(BinaryTreeNode<Integer> root,int data)
	{
		if(root==null)
		{
			return false;
		}
		
		if(root.data==data)
		{
	
			path.add(root);
			return true;
		}
    
		boolean left=roottonode(root.left,data);
    
		if(left)
		{
			path.add(root);
			return true;
		}
    
		boolean right=roottonode(root.right,data);
    
		if(right)
		{

			path.add(root);
			return true;
		}
		return false;
	}
  
	public static void printKleveldown(BinaryTreeNode<Integer> root,int k,BinaryTreeNode<Integer> block)
	{
		if(root==null||k<0||root==block)
		{
			return;
		}
		if(k==0)
		{
			System.out.println(root.data);
            
			return;
		}
		printKleveldown(root.left,k-1,block);
		printKleveldown(root.right,k-1,block);
	}
}
