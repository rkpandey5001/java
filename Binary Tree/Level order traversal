/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> 
  {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) 
    {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution 
{
	public static void printLevelWise(BinaryTreeNode<Integer> root) 
  {
		QueueUsingLL<BinaryTreeNode<Integer>>  primary = new QueueUsingLL<>();
		QueueUsingLL<BinaryTreeNode<Integer>>  secondary = new QueueUsingLL<>();

		primary.enqueue(root);

		while(!primary.isEmpty())
    {
			BinaryTreeNode<Integer> current=null;
			try 
      {
				current = primary.dequeue();
			} 
      catch (QueueEmptyException e) 
      {
				System.out.println("Not possible");
			}
			System.out.print(current.data + " ");
      
			if(current.left != null)
      {
				secondary.enqueue(current.left);
			}
			if(current.right != null)
      {
				secondary.enqueue(current.right);
			}
			if(primary.isEmpty())
      {
				QueueUsingLL<BinaryTreeNode<Integer>>  temp = secondary;
				secondary = primary;
				primary = temp;
				System.out.println();
			}
		}
	}	
}
