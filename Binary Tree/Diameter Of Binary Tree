/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> 
  {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) 
    {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution 
{   
	public static int diameterOfBinaryTree(BinaryTreeNode<Integer> root)
  {
	if (root == null) 
  {
		return 0;
	}
  
	int option1 = height(root.left) + height(root.right);
	int option2 = diameterOfBinaryTree(root.left);
  int option3 = diameterOfBinaryTree(root.right);
	return 1+ Math.max(option1, Math.max(option2, option3));
	}
		
	public static int height(BinaryTreeNode<Integer> root)
  {
			if (root == null) 
      {
				return 0;
			}
			int lh = height(root.left);
			int rh = height(root.right);
			return 1 + Math.max(lh, rh);
		}
}
